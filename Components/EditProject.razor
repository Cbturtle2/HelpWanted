@using Microsoft.AspNetCore.Components.Web;
@using HelpWanted.Models;
@using HelpWanted.Services;
@using System.IO;
@using System.Text;
@using System;
@using MongoDB;
@using MongoDB.Driver;
@using MongoDB.Bson.Serialization.Attributes;
@using MongoDB.Bson;

<div align="center">
    <div>
        <input placeholder="Username" @bind="username">
    </div>
    <div>
        <input placeholder="Project Name" @bind="projName">
    </div>
    <div>
        <button @onclick="Search" align="center">
            Search
        </button>
    </div>
    <div>
        <input placeholder="Project Description" @bind="projDesc">
    </div>
    <div>
        <select id="helpType" name="helpType" @bind="helpType">
            @{
                Enums.HelpTypes[] helpTypes = Enum.GetValues<Enums.HelpTypes>(); 
                for(int i = 0; i < helpTypes.Count(); i++)
                {
                    <option value="@helpTypes[i]">
                        @helpTypes[i]
                    </option>
                }
            }
        </select>
    </div>
    @if(helpType != Enums.HelpTypes.None)
    {
        <div>
            <input placeholder="Help Needed" @bind="helpWanted">
        </div>
        <div>
            <input placeholder="Skells Needed" @bind="helpSkills">
        </div>
    }
    <div>
        <input placeholder = "Team Members" @bind="teamMembers">
    </div>
        <select id="progress" name="progress" @bind="progress">
            @{
                Enums.Progress[] progresses = Enum.GetValues<Enums.Progress>(); 
                for(int i = 0; i < progresses.Count(); i++)
                {
                    <option value="@progresses[i]">
                        @progresses[i]
                    </option>
                }
            }
        </select>
    <div>
        <input placeholder="Contact Info" @bind="contactInfo">
    </div>
    <div>
        <button @onclick="Submit" align="center">
            Edit
        </button>
    </div>
    <div>
        <button @onclick="Delete" align="center">
            Delete
        </button>
    </div>
</div>

@code{
    string username;
    string projName;
    string projDesc;
    string helpWanted;
    string teamMembers;
    string[] teamArray;
    Enums.Progress progress;
    Enums.HelpTypes helpType;
    string contactInfo;
    string helpSkills;
    string[] skillsArray;

    Guid currentProject;

    void Search()
    {
        MongoDBAccess mongoDBAccess = new MongoDBAccess(MongoDBAccess.databaseName);

        List<Project> projects = mongoDBAccess.GetItems<Project>(MongoDBAccess.databaseName);

        for(int i = 0; i < projects.Count(); i++)
        {
            if(username == projects[i].Name && projName == projects[i].ProjectName)
            {
                SetFields(projects[i]);
            }
        }
    }

    void Submit()
    {        
        if(username == null || projName == null)
        {
            return;
        }

        if(teamMembers != null)
        {
            teamArray = teamMembers.Split(", ");
        }

        if(helpSkills != null)
        {
            skillsArray = helpSkills.Split(", ");
        }


        Project editedProj = new Project(username, projName, projDesc, helpWanted, skillsArray, helpType, teamArray, progress, contactInfo);
        
        editedProj.id = currentProject;
        MongoDBAccess mongoDBAccess = new MongoDBAccess(MongoDBAccess.databaseName);
        mongoDBAccess.EditItem<Project>(MongoDBAccess.collectionName, currentProject, editedProj);
        
        ClearFields();
    }

    void Delete()
    {
        MongoDBAccess mongoDBAccess = new MongoDBAccess(MongoDBAccess.databaseName);

        mongoDBAccess.RemoveItem<Project>(MongoDBAccess.collectionName, currentProject);

        ClearFields();
    }

    void SetFields(Project project)
    {
        projDesc = project.ProjectDescription;
        helpWanted = project.HelpWanted;
        if(project.TeamMembers != null)
        {
            teamMembers = "";
            for(int j = 0; j < project.TeamMembers.Count(); j++)
            {
                teamMembers += project.TeamMembers[j] + (j != project.TeamMembers.Count() - 1 ? ", " : "");
            }
        }
        if(project.HelpSkills != null)
        {
            helpSkills = "";
            for(int j = 0; j < project.HelpSkills.Count(); j++)
            {
                helpSkills += project.HelpSkills[j] + (j != project.HelpSkills.Count() - 1 ? ", " : "");
            }
        }
        progress = project.Progress;
        contactInfo = project.ContactInformation;
        currentProject = project.id;
        helpType = project.HelpType;
    }

    void ClearFields()
    {
        username = null;
        projName = null;
        projDesc = null;
        helpWanted = null;
        teamMembers = null;
        progress = 0;
        helpType = 0;
        contactInfo = null;
        helpSkills = null;
    }
}